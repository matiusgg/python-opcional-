#* DEPLOYES: Para enviar nuestra maquina virtual a un servidor, usamos los deploys.
# En el archivo de Runtime.txt junto a Procfile, los ponemos dentro de la carpeta de proyceto(si es que la tienes)
# llamada "src"
# Colocamos la versión de python
# python-3.8.1

# Donde ponemos "main" es el nombre del proyecto con el que queremos acer el deploy
# web: gunicorn main:app

#* Como no vamos a usar volumenes, entonces aquí va la explicación:
#* 1. Cuando ya tengamos todo el tema de archivos, comenzamos a poner codigo, ya cuando queremos hacer una prueba de si
#* funciona en el navegador, nos vamos al archivo "docker-compose.yml" y damos abrimos terminal y ponemos: docker-compose up
#* esto para que ejectue los comandos del docker compose y crear la imagen con el contenedor, nos debería aparecer la URL local
#* donde tenemos la app en el navegador
#* 2. Cuando ya hallamos revisado los cambios, y queremos seguir codeando, colocamos: docker-compose down // para desactivar
#* la ejecución del contenedor, y seguimos codeando lo que necesitemos, ya que si lo dejamos en UP, no veremos los cambios y habrá problemas con el contenedor
#* ahora si queremos volver a comprobar cosas, damos otra vez: docker-compose up
# docker-compose up
# docker-compose down

#????????????????????????????????????????????????????????????????????????

#* EN EL CASO EN EL QUE QUEREMOS USAR VOLUMENES:
#* Nos vamos a "docker-compose.yml" y agregamos a la lista de comando:
# volumes:
#        - ./src:/app
#* Nos vamos terminal, y ponemos: docker-compose up // si corre la app con el contenedor, seguimos
#* Ahora para ver si esta bien el contenedor colocamos:
# docker exec -it nombreImagen/ID_imagen bash
#* Ahora activaremos el VOLUMEN ESPEJO con el siguiente comando:
#* docker run -p puertoExterno:puertoInterno -v ruta del proyecto:\app nombreImagen
#* EN EL CASO DE QUE USES LA TERMINAL CMD:
#* EJM: docker run -p 8000:5000  -v C:\Users\Web\Desktop\pruebasPYTHON\dia43_29Enero_deployDocker\APLICACION_FACTURAS\src:\app facturaschungas
#* EN EL CASO DE QUE USES LA TERMINAL BASH, CAMBIAS EN LA RUTA, EL SIMBOLO "\", POR EL SIMBOLO "/"
#* COMO EN EL SIGUIENTE EJM:
#* docker run -p 8000:5000  -v C:/Users/Web/Desktop/pruebasPYTHON/dia43_29Enero_deployDocker/APLICACION_FACTURAS/src:/app facturaschungas

#????????????????????????????????????????????????????????????????????????

#? AHORA PARA DESCARGAR UNA IMAGEN EN DOCKERHUB
#* para ello colocamos: docker run -p 7000:5000 nombrePropietarioContenedor/nombreImagen // ESto es basicamente descargar la aplicación
#* y ejectuarla en el navegador
#* pero si queremos ver el codigo que ha hecho, ponemos:
# docker exec -it nombreImagen bash

# Cuando ya estemos dentro de linux, y queremos ejecutar un archivo, primero descargamos el VIM
# sudo apt-get install vim
#* para subirlo a dockerhub.

#* ahora para descargarnos la imagen de la persona colocamos
#* docker run --rm -p 7000:5000 nombrePropietarioImagen/nombreImagen:latest
#* el LATEST es para que nos descargue el ultimo tag

#? AHORA PARA SUBIR LA IMAGEN A DOCKERHUB
# primero tenemos que hac un tag que sería como un commit
# docker tag nombreImagen:v1.0 nombrePropietarioImagen/nombreImagen:v1.0
#* verificamos que el tag se halla hecho en la imagen con: docker images
#* al momento de poner nombrePropietarioImagen/nombreImagen:v1.0  // cuando creemos un tag, nos sirve para darle
#* una ruta que ira a dokcerhub
#* Ahora hacemos el docker push para subirlo a dockerhub.
# docker push <nombre usuario>/<nombre imagen>:<tag>
# Comando para eliminar todas la imagesn(no recomendable)
# docker system prune -a

#* COMANDOS A TENER EN CUENTA:

#? Manipular Imágenes.
# Vamos a ver cuantas imágenes tenemos asi:
#* docker images
# Para descargar una imagen debemos hacer esto:
#* docker pull hello-world
# Para convertir una imagen en un contenedor hacemos esto:
#* docker run -it hello-world
# Ahora vamos a borrar una imagen asi:
#* docker rmi images 3ee81f9b1670
# Donde
# 3ee81f9b1670 : Es el id de la imagen

#*******************************************************************

#? Manipular CONTENEDORES

# Manipular Contenedores.
# En caso de querer saber cuantos contenedores tenemos activos debemos ejecutar este comando:
#* docker ps

# En mi caso aun no tengo corriendo ningún contenedor por lo que se muestra esto:
# Pero si lo que queremos es ver todos los contenedores activos e inactivos debemos ejecutar:
#* docker ps -a
# Donde
# -a :es la bandera que le dice a docker que queremos ver todos los contenedores (Detenidos y corriendo).

# Para detener un contenedor que aun este corriendo en docker debemos ejecutar este comando:
#* docker stop 438a832dbc7b
# Donde
# 438a832dbc7b :es el id de nuestro contenedor.

# De igual forma para arrancar un contenedor detenido debemos ejecutar:
#* docker start 438a832dbc7b
# Si ejecutamos
#* docker ps 
# Podremos ver nuestro contenedor corriendo:

# Para eliminar un contenedor debemos ejecutar.
#* docker rm 438a832dbc7b

# Si queremos acceder a nuestro contenedor debemos ejecutar este comando:
#* docker attach 438a832dbc7b

# AHORA VAMOS A UTILIZAR HEROKU
#* nos metemos en la carpeta donde esta el proyecto, es decir, en SRC(si no la tienes, no pasa nada, pon el archivo que crearemos junto con main.py
#* creamos un archivo llamado "runtime.txt" y ponemos:
#? python-3.8.1
#* cReamos otro arhcivo llamado "Procfile", colcas esto:
#?web: gunicorn main:app
#* Ahora verficamos en la consola si esta nuestro contenedor iniciado
#* poenmos "docker-composer build", para volver a recrear la imagen y agregar lo de heroku
#? Ponemos en la consola: heroku login 
#* depsues de logearnos, hay que logearnos al servicio de container de heroku, hay que poner:
#? heroku container:login
#? Ahora en la zona de producción del heroku container, ponemos: heroku create -a nombreContenedorHeroku
#* nos mostrará la URL de heroku donde estará nuestra aplcación
#* Ahora para montar el contenedor de DOCKEr al container de heroku, ponemos:
#? ponemos: heroku container:push web -a nombreContenedorHeroku // IMPORTANTE: Cuando apliquemos el comando debemos estar en la ruta de la raiz del proyecto
#* Es decir, no estar dentro de la carpeta SRC, sino estar en la ruta junto a los archivos de DockerFile, etc. Ya que al aplicar el comando, HEROKU no reconocerá
#* La imagen de DOCKER, ya que no estas en la RUTA adecuada.
#* Ahora para actualizar el container de heroku
#? ponemos: heroku container:release web -a nombreContenedorHeroku
#* Cuando queramos abrir nuestra aplicación en el navegador, colocamos:
#? heroku open -a nombreContenedorHeroku

#* GOOGLE CLOUD RUN: Es un producto similar a HEROKU pero de pago.

#* YA EN LA APGINA DE HEROKU:
# setting -> dominions, podemos aluilar un dominion